@page "/"
@page "/login"
@layout BlankLayout
@using SingSiamOffice.Authentication
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@using SingSiamOffice.Manage
@using Models;
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims
<head>
    <link rel="stylesheet" href="../Pages/Home/Login.razor.css">
</head>


<!-- Sign In Start -->
<div class="container-fluid">
    <div class="row h-100 align-items-center justify-content-center" style="min-height: 100vh;">
        <div class="col-12 col-sm-8 col-md-6 col-lg-5 col-xl-4">
            <div class="bg-light rounded p-4 p-sm-5 my-4 mx-3">
                <div class="text-center mb-3">
                        <img class="rounded-circle" src="img/icons/icon.svg" alt="" style="width:20rem;">
                    @* <h3>Sign In</h3> *@
                </div>
                <div class="form-floating mb-3">
                    <MudTextField id="username" @bind-Value="username" Label="ชื่อผู้ใช้งาน" Variant="Variant.Outlined"></MudTextField>
  
                </div>
                <div class="form-floating mb-4">
                    <MudTextField @bind-Value="password" Label="รหัสผ่าน" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password"></MudTextField>
                 
                </div>
                <div class="d-flex align-items-center justify-content-between mb-4">
                    <div class="form-check">
                        <input type="checkbox" value="lsRememberMe" id="rememberMe"> <label for="rememberMe">จดจำการเข้าใช้</label>
                    </div>
              
                </div>
                <button type="submit" style="@button" class="btn btn-primary py-3 w-100 mb-4" @onclick="()=>Submit()">ลงชื่อเข้าใช้งาน</button>
            
            </div>
        </div>
    </div>
</div>
<!-- Sign In End -->

@code {

    [Inject]
    NavigationManager NavManager { get; set; }
    [Inject]
    IJSRuntime JSRuntime { get; set; }
    [Inject]
    IAuthenticationService AuthenticationService { get; set; }
    [Inject]
    Manage.GlobalData globalData { get; set; }
    public string username { get; set; }
    public string password { get; set; }

    string button = "background-color:#840012; color:#ffff;";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;



    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTasks { get; set; }
    AuthenticationState auth;
    SingsiamdbContext db = new SingsiamdbContext();
    [Inject]
    Manage.UserManagement _userManager { get; set; }
    [Inject]
    Manage.EventLog eventLog { get; set; }
    [Inject]
    Manage.BranchService branchService { get; set; }
    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //await currentUser.StartAsync();
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            if (user.Identity.IsAuthenticated)
            {
                try
                {

                    var username = user.Identity.Name;
                    var brach = db.Logins.Where(s => s.Username == username).Include(s => s.Branch).FirstOrDefault();
                    globalData.username = username;
                    globalData.fullname = brach.Fullname;
                    globalData.branch_name = brach.Branch.BranchName;
                    branchService.branch_ID = brach.Branch.Id;
                    eventLog.Update_by = await _userManager.GetUserId(username);
                    SingSiamOffice.Models.EventLog toAdd = new SingSiamOffice.Models.EventLog
                        {
                            Uuid = Guid.NewGuid(),
                            TableName = "login",
                            Opertation = "Online",
                            UpdateBy = eventLog.Update_by

                        };
                    await _userManager.AddEventLog(toAdd);
                }
                catch
                {
                }




            }
            else
            {

            }
        }
        catch
        {

        }

    }

    async Task Submit()
    {
        // if (username == null || password == null)
        // {
        //     await JSRuntime.InvokeVoidAsync("alert_login_fail");
        //     return;
        // }
        // var userAccount = userAccountService.GetByUserName(username, password);
        // if (userAccount == null)
        // {
        //     await JSRuntime.InvokeVoidAsync("alert_login_fail");
        //     return;
        // }


        // var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        // await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        //     {
        //         UserName = userAccount.Username,
        //         Role = userAccount.Role.RoleName
        //     });
        // eventLog.Update_by = await _userManager.GetUserId(username);

        // if (userAccount.Role.RoleName == "Admin")
        // {

        //     NavManager.NavigateTo("/dashboard-admin", true);
        // }
        // else
        // {

        //     branchService.branch_ID = userAccount.BranchId.Value;


        //     NavManager.NavigateTo("/dashboard/" + userAccount.BranchId.ToString(), true);
        // }


        if (!String.IsNullOrEmpty(username) && !String.IsNullOrEmpty(password))
        {
            var result = await AuthenticationService.Login(new AuthenticationUserModel { UserName = username, Password = password });
            eventLog.Update_by = await _userManager.GetUserId(username);
            if (result == null)
            {
                await JSRuntime.InvokeVoidAsync("alert_login_fail");
                return;
            }
            if (result.RoleName == "Admin")
            {

                NavManager.NavigateTo("/dashboard-admin", true);
            }
            else
            {
                var brach = db.Logins.Where(s => s.Username == username).Include(s => s.Branch).FirstOrDefault();
                globalData.username = username;
                globalData.branch_name = brach.Branch.BranchName;
                branchService.branch_ID = brach.BranchId;


                NavManager.NavigateTo("/dashboard/" + brach.BranchId.ToString(), true);
            }

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert_error");
        }

    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await JSRuntime.InvokeVoidAsync("rememberUser");
          
    //     }
    // }

}
